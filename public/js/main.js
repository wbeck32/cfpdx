function getBeerInfo(e){$(".breweryBeers").remove(),$.getJSON("/beer/"+e,function(e){$.each(e,function(e,a){"data"===e&&(console.log(e),console.log(a.id))})})}function initMap(){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(e){var a={lat:e.coords.latitude,lng:e.coords.longitude};$("div#findNearBeer").attr({lat:a.lat,lng:a.lng})},function(){handleLocationError(!0,infoWindow,map.getCenter())}):handleLocationError(!1,infoWindow,map.getCenter())}function handleLocationError(e,a,n){a.setPosition(n),a.setContent(e?"Error: The Geolocation service failed.":"Error: Your browser doesn't support geolocation."),a.open(map)}function addMarker(e,a){console.log(e,a);new google.maps.Marker({lat:e,lng:a,map:map})}$("div#findNearBeer").click(function(){var e=$("div#findNearBeer").attr("lat"),a=$("div#findNearBeer").attr("lng");$("li.beerInfo").remove(),$.getJSON("/findNearBeer/"+e+"/"+a,function(e){$.each(e,function(e,a){if("data"===e)for(var n,r=0;r<10;r++)n=void 0!==a[r].brewery.images?a[r].brewery.images.icon:"../images/beer.png",$("<li/>").addClass("beerInfo").bind("click",function(){$(".breweryBeers").remove()}).attr("id",a[r].brewery.id).append('<span class="icon"><img src="'+n+'"></span>').append('<span><div class="breweryName">'+a[r].brewery.name+"</div>").append('<div class="breweryAddress">'+a[r].streetAddress+"</div>").append('<div class="breweryPhone">'+a[r].phone+"</div></span>").appendTo("ul#beerData")})})}),$("ul#beerData").on("click","li",function(e){var a=$(this).attr("id");$.getJSON("/brewery/"+a+"/beers",function(e){if(e.data){var n=$("<div class='breweryBeers'></div>").appendTo("li#"+a);$.each(e.data,function(a,r){var i=$("<div/>").attr("id",e.data[a].id).appendTo(n);$('<span class="findById"/>').html('<span class="displayName">'+e.data[a].nameDisplay+"</span>").append('<span class="abv">'+e.data[a].abv+"</span>").click(function(){getBeerInfo(e.data[a].id)}).appendTo(i)})}else $('<div class="breweryBeers"></div>').html("<div>Sorry, no beer data available for this brewery.</div>").appendTo("li#"+a)})});var map,infoWindow;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
